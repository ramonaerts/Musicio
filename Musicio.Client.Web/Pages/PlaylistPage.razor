@page "/playlists/{PlaylistId:int}"
@using Musicio.Client.Playlist
@using Musicio.Client.Song
@using Musicio.Client.User
@using Musicio.Core.Models
@using Musicio.Client.Web.Components

@inject IPlaylistService PlaylistService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject ISongService SongService

@if (_loading)
{
    <div class="loading">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <h2>@_playlist.Title</h2>
    <div class="artist-container">
        @if (_playlist.Image == null)
        {
            <div class="playlist-image-detail" style="background-image: url(images/StockImage.jpg)"></div>
        }
        else
        {
            <div class="playlist-image-detail" style="background-image: url(@($"/playlist/images/{_playlist.Image}"))"></div>
        }
    </div>
    <p>
        <Button Enabled="@_playable" Text="Play Playlist" OnClick="@PlayPlaylist"></Button>
    </p>
    @if (_success)
    {
        <div class="alert alert-success">@_message</div>
    }
    @if (_error)
    {
        <div class="alert alert-danger">@_message</div>
    }
    <table class="table table-hover">
        <tr><th>Title</th><th>Artist</th><th>Remove song</th></tr>
        @foreach (var song in _playlist.Songs)
        {
            <tr>
                <td>@song.SongTitle</td>
                <td>@song.Artist</td>
                <td>
                    <a class="oi oi-x" @onclick="@(() => RemovePlaylistSong(song.CollectionId, song.SongTitle))"></a>
                </td>
            </tr>
        }
    </table>
}



        @code {
    [Parameter]
        public int PlaylistId { get; set; }

        private Playlist _playlist = new Playlist();

        private bool _playable;
        private bool _loading;
        private bool _error = false;
        private bool _success = false;
        private string _message;

        protected override async Task OnInitializedAsync()
        {
            _loading = true;

            if (await SessionService.CheckIfTokenIsAvailable() == false)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            _playlist = await PlaylistService.GetPlaylistSongs(PlaylistId);

            if (_playlist.Songs.Count != 0) _playable = true;

            StateHasChanged();

            _loading = false;
        }

        private async Task RemovePlaylistSong(int playlistSongId, string title)
        {
            Console.WriteLine(playlistSongId);
            var success = await PlaylistService.RemovePlaylistSong(_playlist.Id, playlistSongId);

            if (success)
            {
                _error = false;
                _success = true;
                _message = title + " has successfully been removed from the playlist";
                _playlist.Songs.RemoveAll(x => x.CollectionId == playlistSongId);

            }
            else
            {
                _error = true;
                _success = false;
                _message = "Something went wrong, please try again";
            }

            StateHasChanged();
        }

        private Task PlayPlaylist()
        {
            SongService?.OnPlay(_playlist.Songs);

            return Task.CompletedTask;
        }
        }
