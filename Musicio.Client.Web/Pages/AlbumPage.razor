@page "/artists/{ArtistId:int}/{AlbumId:int}"
@using Musicio.Client.Album
@using Musicio.Client.Artist
@using Musicio.Client.Playlist
@using Musicio.Client.Song
@using Musicio.Client.User
@using Musicio.Core.Models
@using Musicio.Client.Web.Components

@inject IAlbumService AlbumService
@inject IPlaylistService PlaylistService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager
@inject ISongService SongService

@if (_loading)
{
    <div class="loading">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <h2>@_album.AlbumTitle</h2>
    <div class="artist-container">
        @if (_album.Image == null)
        {
            <div class="playlist-image-detail" style="background-image: url(images/StockImage.jpg)"></div>
        }
        else
        {
            <div class="playlist-image-detail" style="background-image: url(@($"/album/images/{_album.Image}"))"></div>
        }
    </div>
    <Button Enabled="true" Text="Play album" OnClick="@PlayAlbum"></Button>
    <table class="table table-hover">
        <tr><th>Title</th><th>Artist</th><th>Add song</th></tr>
        @foreach (var song in _album.Songs)
        {
            <tr>
                <td>@song.SongTitle</td>
                <td>@song.Artist</td>
                <td>
                    <div class="dropdown">
                        <span class="oi oi-ellipses" aria-hidden="true"></span>
                        <div class="dropdown-content">
                            @foreach (var pl in _userPlaylists)
                            {
                                <a @onclick="@(() => AddSongToPlaylist(pl.Id, song.Id))">@pl.Title</a>
                            }
                        </div>
                    </div>
                </td>
                @*<td>
                        <form class="" id="" method="post" asp-controller="Playlist" asp-action="RemovePlaylistSong" asp-route-playlistid="@Model.PlaylistId" asp-route-songid="@s.PlaylistSongID">
                            <input type="submit" class="btn-danger" value="Remove song"/>
                        </form>
                    </td>*@
            </tr>
        }
    </table>
}

@code {
    [Parameter]
    public int ArtistId { get; set; }

    [Parameter]
    public int AlbumId { get; set; }

    private Album _album = new Album();
    private List<Playlist> _userPlaylists = new List<Playlist>();

    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        if (await SessionService.CheckIfTokenIsAvailable() == false)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _album = await AlbumService.GetAlbumWithSongs(AlbumId);
        _userPlaylists = await PlaylistService.GetUserPlaylistNames();

        StateHasChanged();

        _loading = false;
    }

    private async Task AddSongToPlaylist(int playlistId, int songId)
    {
        var success = await PlaylistService.AddSongToPlaylist(playlistId, songId);
    }

    private Task PlayAlbum()
    {
        SongService?.OnPlay(_album.Songs);

        return Task.CompletedTask;
    }
}
