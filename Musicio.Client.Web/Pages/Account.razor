@page "/account"
@using Musicio.Client.User
@using Musicio.Client.Validation
@using Musicio.Client.Web.Components
@using Musicio.Core.Models

@inject NavigationManager NavigationManager
@inject IValidationService ValidationService
@inject IUserService UserService

<h3>Account</h3>

<Form Id="account-management">
    <FormGroup>
        <InputField Type="text" Text="E-mail" Value="@_currentMail" Enabled="@_editingEnabled" Placeholder="Mail" OnChange="@OnMailChange" />
    </FormGroup>
    <FormGroup>
        <InputField Type="text" Text="Username" Value="@_currentUsername" Enabled="@_editingEnabled" Placeholder="Username" OnChange="@OnUsernameChange" />
    </FormGroup>
    @if (!_editingEnabled)
    {
        <FormGroup>
            <InputField Type="password" Text="Current password" Enabled="@_editingEnabled" Placeholder="Current password" OnChange="@OnCurrentPasswordChange" />
        </FormGroup>
        <FormGroup>
            <InputField Type="password" Text="New password" Enabled="@_editingEnabled" Placeholder="New password" OnChange="@OnNewPasswordChange" />
        </FormGroup>
        <FormGroup>
            <InputField Type="password" Text="Confirm new password" Enabled="@_editingEnabled" Placeholder="Confirm new password" OnChange="@OnConfirmPasswordChange" />
        </FormGroup>
        <FormGroup>
            <Button Enabled="true" Text="Save" OnClick="@ChangeUserInfo"></Button>
        </FormGroup>
        <FormGroup>
            <Button Enabled="true" Text="Cancel" OnClick="@SwitchMode"></Button>
        </FormGroup>
        @if (_error)
        {
            <div class="alert alert-danger">
                @_errorMessage
            </div>
        }
    }
    else
    {
        <FormGroup>
            <Button Enabled="true" Text="Change account information" OnClick="@SwitchMode"></Button>
        </FormGroup>
        <FormGroup>
            <Button Enabled="true" Text="Logout" OnClick="@Logout"></Button>
        </FormGroup>
    }
</Form>

@code {
    private User _currentUser = new User();
    private string _currentUsername;
    private string _newUsername;

    private string _currentPassword;
    private string _newPassword;
    private string _confirmPassword;

    private string _currentMail;
    private string _newMail;

    private string _errorMessage;
    private bool _editingEnabled = true;
    private bool _buttonEnabled;
    private bool _error;


    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UserService.GetUserInfo(1);
        _currentUsername = _currentUser.Username;
        _currentMail = _currentUser.Mail;

        StateHasChanged();
    }

    public Task SwitchMode()
    {
        _currentUsername = _currentUser.Username;
        _currentMail = _currentUser.Mail;

        _editingEnabled = !_editingEnabled;

        StateHasChanged();

        return Task.CompletedTask;
    }

    public Task OnUsernameChange(string value)
    {
        _newUsername = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnCurrentPasswordChange(string value)
    {
        _currentPassword = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnNewPasswordChange(string value)
    {
        _newPassword = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnConfirmPasswordChange(string value)
    {
        _confirmPassword = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    public Task OnMailChange(string value)
    {
        _newMail = value;

        ValidateInput();

        return Task.CompletedTask;
    }

    private void ValidateInput()
    {
        if (_editingEnabled) _buttonEnabled = ValidationService.ValidateChangeInfoInput(_newMail, _newUsername, _currentPassword, _newPassword, _confirmPassword);

        StateHasChanged();
    }

    private async Task ChangeUserInfo()
    {
        if (!_newPassword.Equals(_confirmPassword))
        {
            _errorMessage = "Make sure your new passwords match correctly.";
            _error = true;

            StateHasChanged();
            return;
        }

        bool changeSuccess = await UserService.ChangeUserInfo(1, _newMail, _newUsername, _newPassword, _currentPassword);

        if (changeSuccess)
        {
            _errorMessage = "Account settings have been successfully changed, you can log in next time with the new credentials.";
            _error = false;
            StateHasChanged();
        }
        else
        {
            _errorMessage = "An account with the same mail address already exists, use another one.";
            _error = true;
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        NavigationManager.NavigateTo("/login");
    }
}
