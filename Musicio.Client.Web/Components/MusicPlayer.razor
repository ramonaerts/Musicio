@using System.IO
@using Howler.Blazor.Components
@using Musicio.Client.Song
@using Musicio.Client.Web.Invokables
@using Musicio.Core.Models
@using Musicio.Client.Web.Components.Grid
@using NAudio.Wave
@inject IJSRuntime JSRuntime
@inject IHowl Howl
@inject IHowlGlobal HowlGlobal
@inject ISongService SongService

<Grid>
    <GridColumn ColumnSize="ColumnSize.Small">
        <GridItem>
            @if (HasStarted)
            {
                <div class="text-white">
                    @CurrentSong.SongTitle<br/>
                    @CurrentSong.Artist
                </div>
            }
        </GridItem>
    </GridColumn>
    <GridRow>
        <GridColumn ColumnSize="ColumnSize.Full">
            <GridItem>
                <MusicProgress @ref="_musicProgress"/>
            </GridItem>
        </GridColumn>
        <GridColumn ColumnSize="ColumnSize.Full">
            <GridItem>
                @if (HasStarted)
                {
                    <button class="btn btn-primary oi oi-arrow-thick-left" @onclick="LoadPreviousSong"></button>
                    <button class="btn btn-primary @icon" @onclick="TogglePlay"></button>
                    <button class="btn btn-primary oi oi-media-stop" @onclick="Stop"></button>
                    <button class="btn btn-primary oi oi-arrow-thick-right" @onclick="LoadNextSong"></button>
                }
                else
                {
                    <button class="btn btn-primary oi oi-arrow-thick-left" @onclick="LoadPreviousSong" disabled></button>
                    <button class="btn btn-primary @icon" @onclick="TogglePlay" disabled></button>
                    <button class="btn btn-primary oi oi-media-stop" @onclick="Stop" disabled></button>
                    <button class="btn btn-primary oi oi-arrow-thick-right" @onclick="LoadNextSong" disabled></button>
                }
            </GridItem>
        </GridColumn>
    </GridRow>
    <GridColumn ColumnSize="ColumnSize.Small"></GridColumn>
</Grid>

@code {

    MusicProgress _musicProgress;
    Functions functions;
    string icon = "oi oi-media-play";

    [Parameter]
    public Song CurrentSong { get; set; }

    [Parameter]
    public List<Song> SongQueue { get; set; }
    private int _queueNumber;

    [Parameter]
    public bool IsPlaying { get; set; }

    [Parameter]
    public bool HasStarted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SongService.OnPlay = SetNewQueue;
        SongService.StopMusic = StopMusic;

        CurrentSong = new Song();
        CurrentSong.Artist = "";
        CurrentSong.SongTitle = "";

        IsPlaying = false;
        HasStarted = false;

        functions = new Functions(JSRuntime);

        Howl.OnPlay += e =>
        {
            CurrentSong.SongDuration = e.TotalTime;

            StateHasChanged();
        };

        Howl.OnPause += e =>
        {
            StateHasChanged();
        };

        Howl.OnStop += e =>
        {
            StateHasChanged();
        };

        Howl.OnEnd += e =>
        {
            if (SongQueue.Count == 0)
            {
                Stop();
            }
            else
            {
                LoadNextSong();
                IsPlaying = false;
                HasStarted = false;
                TogglePlay();
            }

            StateHasChanged();
        };
    }

    protected async Task TogglePlay()
    {
        Console.WriteLine("Here?");
        if (!IsPlaying && !HasStarted)
        {
            Console.WriteLine("Here too?");
            IsPlaying = true;
            HasStarted = true;
            functions.SetTimeout(RefreshTimeStatus, 900);
            icon = "oi oi-media-pause";
            await Howl.Play($"/song/songs/{CurrentSong.SongFile}");
        }
        else if (IsPlaying && HasStarted)
        {
            IsPlaying = false;
            icon = "oi oi-media-play";
            await Howl.Pause();
        }
        else if (!IsPlaying && HasStarted)
        {
            IsPlaying = true;
            functions.SetTimeout(RefreshTimeStatus, 900);
            icon = "oi oi-media-pause";
            await Howl.Pause();
        }

        StateHasChanged();
    }

    protected void LoadNextSong()
    {
        IsPlaying = false;
        HasStarted = false;
        Howl.Stop();
        _queueNumber++;
        if (_queueNumber == SongQueue.Count) Stop();
        else
        {
            CurrentSong = SongQueue[_queueNumber];
            TogglePlay();
        }
    }

    protected void LoadPreviousSong()
    {
        IsPlaying = false;
        HasStarted = false;
        Howl.Stop();
        if(_queueNumber != 0) _queueNumber--;
        CurrentSong = SongQueue[_queueNumber];
        TogglePlay();
    }

    protected async Task Stop()
    {
        _queueNumber = -1;
        IsPlaying = false;
        HasStarted = false;
        icon = "oi oi-media-play";
        await RefreshTimeStatus();
        await Howl.Stop();

        StateHasChanged();
    }

    async Task RefreshTimeStatus()
    {
        if (IsPlaying || !HasStarted)
        {
            _musicProgress.SetTotalTime((int)CurrentSong.SongDuration.TotalSeconds);
            var currentTime = await Howl.GetCurrentTime();
            var currentTimeSec = (int)currentTime.TotalSeconds;
            _musicProgress.Refresh(currentTimeSec);

            functions.SetTimeout(RefreshTimeStatus, 900);
        }
    }

    private void SetNewQueue(List<Song> songs)
    {
        Howl.Stop();
        _queueNumber = -1;
        SongQueue = songs;
        LoadNextSong();
        StateHasChanged();
    }

    private void StopMusic()
    {
        Stop();
    }
}