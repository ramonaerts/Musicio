@using System.IO
@using Howler.Blazor.Components
@using Musicio.Client.Web.Invokables
@using Musicio.Core.Domain
@using NAudio.Wave
@inject IJSRuntime JSRuntime
@inject IHowl Howl
@inject IHowlGlobal HowlGlobal

<MusicProgress @ref="_musicProgress" />
<button class="btn btn-primary @icon" @onclick="TogglePlay"></button>
<button class="btn btn-primary oi oi-media-stop" @onclick="Stop"></button>
@*<audio controls>
    <source src="audio/Sample.mp3" type="audio/mpeg">
</audio>*@
@*<p>@CurrentSong.SongTitle</p>
<p>@CurrentSong.Artist</p>*@

@*<button class="btn btn-primary oi oi-media-step-backward" @onclick="Previous"></button>
    <button class="btn btn-primary oi oi-media-step-forward" @onclick="Next"></button>*@

@code {

    MusicProgress _musicProgress;
    Functions functions;
    FileEncoder encoder;
    string icon = "oi oi-media-play";

    [Parameter]
    public Song CurrentSong { get; set; }

    [Parameter]
    public bool IsPlaying { get; set; }

    [Parameter]
    public bool HasStarted { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        IsPlaying = false;
        HasStarted = false;

        encoder = new FileEncoder();

        Song song = new Song { SongFile = "Animals.mp3", SongTitle = "Animals", Artist = "Martin Garrix" };
        CurrentSong = song;

        functions = new Functions(JSRuntime);

        Howl.OnPlay += e =>
        {
            CurrentSong.SongDuration = e.TotalTime;

            StateHasChanged();
        };

        Howl.OnPause += e =>
        {
            StateHasChanged();
        };

        Howl.OnStop += e =>
        {
            StateHasChanged();
        };

        Howl.OnEnd += e =>
        {
            Stop();

            StateHasChanged();
        };
    }

    protected async Task TogglePlay()
    {
        if (!IsPlaying && !HasStarted)
        {
            IsPlaying = true;
            HasStarted = true;
            functions.SetTimeout(RefreshTimeStatus, 900);
            icon = "oi oi-media-pause";
            await Howl.Play($"/song/songs/{CurrentSong.SongFile}");
        }
        else if (IsPlaying && HasStarted)
        {
            IsPlaying = false;
            icon = "oi oi-media-play";
            await Howl.Pause();
        }
        else if (!IsPlaying && HasStarted)
        {
            IsPlaying = true;
            functions.SetTimeout(RefreshTimeStatus, 900);
            icon = "oi oi-media-pause";
            await Howl.Pause();
        }
        StateHasChanged();
    }

    protected async Task Stop()
    {
        IsPlaying = false;
        HasStarted = false;
        icon = "oi oi-media-play";
        await RefreshTimeStatus();
        await Howl.Stop();

        StateHasChanged();
    }

    async Task RefreshTimeStatus()
    {
        if (IsPlaying || !HasStarted)
        {
            _musicProgress.SetTotalTime((int)CurrentSong.SongDuration.TotalSeconds);
            TimeSpan currentTime = await Howl.GetCurrentTime();
            Console.WriteLine(currentTime);
            int currentTimeSec = (int)currentTime.TotalSeconds;
            Console.WriteLine(currentTimeSec);
            _musicProgress.Refresh(currentTimeSec);

            functions.SetTimeout(RefreshTimeStatus, 900);
        }
    }
}